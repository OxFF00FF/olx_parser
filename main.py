import asyncio
import os
import platform
import sys
import traceback
from time import perf_counter

from Src.app.colors import *
from Src.app.logging_config import logger
from Src.menu import banner, main_menu, choose_region, choose_city, choose_file, choose_parsed_city, authorize
from Src.parser.credentials import get_token
from Src.parser.olx import olxParser
from Src.parser.utils import format_proxies

__version__ = 'v 1.2.0'


async def main():
    start = perf_counter()

    try:
        parser = olxParser(Xlsx=True)

        banner(__version__)
        format_proxies()
        await main_menu()

        choice = input(f'{CYAN}‚ñ∂Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ({WHITE}{BOLD}1/2/3/4{RESET}{CYAN}): {WHITE}')
        if choice == '1':
            # –í—ã–±–æ—Ä —Ä–µ–≥–æ–∏–Ω–∞
            region = await choose_region(parser)

            # –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
            city = await choose_city(parser, region)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –†–µ–≥–∏–æ–Ω–∞ –∏ ID –ì–æ—Ä–æ–¥–∞ –≤ –ø–∞—Ä—Å–µ—Ä
            await parser.run(region.id, city.id)

        elif choice == '2':
            await get_token(exp_time_only=True, show_info=False)
            choosed_filename = choose_file()
            await parser.parse_phones_from_file(choosed_filename, show_info=True)

        elif choice == '3':
            parsed_files = choose_parsed_city()
            for n_file, filepath in enumerate(parsed_files):
                filename = os.path.basename(filepath)

                if os.path.basename(filename).startswith('+'):
                    continue

                await get_token(exp_time_only=True, show_info=False)
                print(f"[{LIGHT_BLUE}{n_file + 1} / {len(parsed_files)}{WHITE}]  {filename}")
                await parser.parse_phones_from_file(filepath, show_info=False)
            print(f"‚úîÔ∏è  –í—Å–µ —Ñ–∞–π–ª—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")

        elif choice == '4':
            parsed_files = choose_parsed_city()
            parser.merge_parsed_files(parsed_files)

        elif choice == '5':
            authorize()

        elif '-' in choice:
            parts = choice.split('-')
            region_id = int(parts[1])
            city_id = int(parts[2])
            await parser.run(region_id, city_id)

        else:
            print(f"‚ùå  –¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç: {LIGHT_RED}{choice}{WHITE} \n")
            input('\n–î–ª—è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ Enter . . .')
            os.execl(sys.executable, sys.executable, *sys.argv)

    except Exception as e:
        logger.error(f"üö´  –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(traceback.format_exc())
        print('\n[–ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –∫–æ–¥–æ–º 1]')
        input('–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Enter . . .')

    finally:
        end = perf_counter() - start
        print('\n')
        logger.info(f"[Finished in {end:.2f}s]")

        print('\n[–ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –∫–æ–¥–æ–º 0]')
        while True:
            answer = input(f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏—à–∏ {UNDERLINED}Q{RESET}{WHITE}. –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à—É {UNDERLINED}ENTER{RESET}{WHITE} –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
            if answer.lower() == 'q' or answer.lower() == '–π':
                break
            os.system("cls")
            os.execl(sys.executable, sys.executable, *sys.argv)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        input('\n–í—ã –∑–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É –ø–∞—Ä—Å–µ—Ä–∞. –î–ª—è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ Enter . . .')
        os.execl(sys.executable, sys.executable, *sys.argv)
