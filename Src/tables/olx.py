import asyncio
import os
import time

from openpyxl import Workbook, load_workbook
from openpyxl.styles import Font, Alignment, NamedStyle, PatternFill
from openpyxl.utils import get_column_letter
from tqdm import tqdm
from yaspin import yaspin

from Src.app.colors import *
from Src.app.logging_config import logger
from Src.parser.credentials import get_token
from Src.parser.schemas import Offer
from Src.parser.utils import validate_filename, clickable_file_link

lock = asyncio.Lock()

green_fill = PatternFill(start_color="47ff94", end_color="47ff94", fill_type="solid")
orange_fill = PatternFill(start_color="ff6347", end_color="ff6347", fill_type="solid")
lavender_fill = PatternFill(start_color="baa4fc", end_color="baa4fc", fill_type="solid")
gray_fill = PatternFill(start_color="bbbbbb", end_color="bbbbbb", fill_type="solid")

hlink_style = Font(color="0000FF", underline="single")

number_style = NamedStyle(name="number_style", number_format="0", alignment=Alignment(horizontal='left'))
success_status = NamedStyle(name="success_status", fill=green_fill, alignment=Alignment(horizontal='center'))
error_status = NamedStyle(name="error_status", fill=orange_fill, alignment=Alignment(horizontal='center'))
hidden_status = NamedStyle(name="hidden_status", fill=lavender_fill, alignment=Alignment(horizontal='center'))
not_specified_status = NamedStyle(name="not_specified_status", fill=gray_fill, alignment=Alignment(horizontal='center'))


def save_offers_excel(content: list[Offer], filepath: str, show_info: bool = True):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (`Offer`) –≤ Excel-—Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏.

    –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ª–∏—Å—Ç–∞.
    –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª—é—á–∞–µ—Ç –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ URL.

    :param content: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ.
    :param filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ.
    :param show_info: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.
    """
    column_mapping = {
        'id': 'ID',
        'title': '–û–±—ä—è–≤–ª–µ–Ω–∏–µ',
        'number': '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        'selelr_name': '–ü—Ä–æ–¥–∞–≤–µ—Ü',
        'seller_city': '–ì–æ—Ä–æ–¥',
        'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
        'price_usd': '–°—Ç–æ–∏–º–æ—Å—Ç—å USD',
        'price_uah': '–°—Ç–æ–∏–º–æ—Å—Ç—å UAH',
        'price_text': '–¶–µ–Ω–∞ —Ñ–æ—Ä–º–∞—Ç.',
        'posted_date': '–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
        'url': '–°—Å—ã–ª–∫–∞',
    }

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    headers = [column_mapping[key] for key in column_mapping.keys()]

    if os.path.exists(filepath):
        wb = load_workbook(filepath)
        ws = wb.active
    else:
        wb = Workbook()
        ws = wb.active
        ws.title = "–û–±—ä—è–≤–ª–µ–Ω–∏—è"
        ws.append(headers)
        for col_num, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col_num)
            cell.font = Font(bold=True)
            cell.alignment = Alignment(horizontal='center')

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
    column_widths = {i: len(headers[i - 1]) + 2 for i in range(1, len(headers) + 1)}

    unique_offers_by_id = []
    seen_ids = set()

    for offer in content:
        if offer.id not in seen_ids:
            unique_offers_by_id.append(offer)
            seen_ids.add(offer.id)

    for offer in unique_offers_by_id:
        logger.debug(f"üì¶  {repr(offer)}")

        row = [
            offer.id,
            offer.title,
            offer.phone_number,
            offer.seller_name or '',
            offer.seller_city or ' ',
            offer.description or ' ',
            offer.price_usd or ' ',
            offer.price_uah or ' ',
            offer.price_str or ' ',
            offer.posted_date or '',
            offer.url or '',
        ]
        ws.append(row)

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
        for col_num, value in enumerate(row, 1):
            val_str = str(value)
            column_widths[col_num] = max(column_widths[col_num], len(val_str) + 10)
            cell = ws.cell(row=ws.max_row, column=col_num)
            cell.alignment = Alignment(horizontal='left')

        # —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        offer_title_cell = ws.cell(row=ws.max_row, column=2)
        offer_title_cell.hyperlink = offer.url
        offer_title_cell.font = hlink_style

        # —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è url
        offer_url_cell = ws.cell(row=ws.max_row, column=11)
        offer_url_cell.hyperlink = offer.url
        offer_url_cell.font = hlink_style

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
    for col_num, width in column_widths.items():
        ws.column_dimensions[get_column_letter(col_num)].width = min(width, 100)

    try:
        wb.save(filepath)
        if show_info:
            print(f"üíæ  {LIGHT_GREEN}–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ `{clickable_file_link(filepath)}` {WHITE}")
    except PermissionError as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å EXCEL —Ñ–∞–π–ª: {e}")


def merge_city_offers(data_dir: str, region_name: str, region_id: int, city_name: str, city_id: int, bar: str):
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ XLSX-—Ñ–∞–π–ª—ã –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤ –æ–¥–∏–Ω Excel-—Ñ–∞–π–ª —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏.

    –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º Excel-—Ñ–∞–π–ª–∞–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞, —Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö –≤ –æ–¥–Ω—É –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É,
    –¥–æ–±–∞–≤–ª—è–µ—Ç –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é `data_dir`.

    :param data_dir: –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è XLSX-—Ñ–∞–π–ª—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –≥–æ—Ä–æ–¥–∞–º.
    :param region_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞.
    :param region_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞.
    :param city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.
    :param city_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–∞.
    :param bar: –°—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ tqdm).
    """
    print("üîÑ  –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü")
    time.sleep(1)

    xlsx_path = os.path.join(data_dir, f"{region_name.replace(' ', '-')}_{region_id}", f"{city_name}_{city_id}")
    save_path = os.path.join(data_dir, f"merged_{region_name}_{region_id}__{city_name}_{city_id}.xlsx")

    merged_wb = Workbook()
    output_ws = merged_wb.active
    output_ws.title = f"{region_name} ¬∑ {city_name}"
    header_written = False
    column_widths = {}
    seen_ids = set()

    xlsx_files = [f for f in os.listdir(xlsx_path) if f.endswith('xlsx')]

    progress_bar = tqdm(xlsx_files, bar_format=bar, ncols=150, leave=False, ascii=' ‚ñ±‚ñ∞')

    for filename in progress_bar:
        file_path = os.path.join(xlsx_path, filename)
        progress_bar.set_description_str(f"{filename[:50]}...")

        processed_wb = load_workbook(file_path)
        processed_ws = processed_wb.active
        rows = list(processed_ws.iter_rows(values_only=True))

        if not rows:
            continue

        # –ó–∞–ø–∏—Å—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if not header_written:
            output_ws.append(rows[0])
            for col_num, header in enumerate(rows[0], 1):
                cell = output_ws.cell(row=1, column=col_num)
                cell.font = Font(bold=True)
                cell.alignment = Alignment(horizontal='center')
                column_widths[col_num] = len(str(header)) + 2
            header_written = True
            data_rows = rows[1:]
        else:
            data_rows = rows[1:]

        for row in data_rows:
            offer_id = row[0]
            if offer_id in seen_ids:
                continue
            seen_ids.add(offer_id)
            output_ws.append(row)

    print("\r‚úÖ  –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", end="", flush=True)
    time.sleep(1)

    with yaspin(text="–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ") as spinner:
        merged_wb.save(save_path)
        spinner.text = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ'
        spinner.ok('‚úîÔ∏è')
        time.sleep(1)
    print("üîÑ  –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫")

    total_rows = output_ws.max_row - 1
    for row in tqdm(output_ws.iter_rows(min_row=2, max_row=output_ws.max_row), total=total_rows, desc="üîÑ  –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫", bar_format=bar, ncols=150, leave=False, ascii=' ‚ñ±‚ñ∞'):
        for col_idx, cell in enumerate(row, 1):
            val_str = str(cell.value) if cell.value is not None else ''
            cell.alignment = Alignment(horizontal='left')
            column_widths[col_idx] = max(column_widths.get(col_idx, 0), len(val_str) + 10)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
        if len(row) >= 11:
            title_cell = row[1]  # 2-—è –∫–æ–ª–æ–Ω–∫–∞ - –ù–∞–∑–≤–∞–Ω–∏–µ
            url_cell = row[10]  # 11-—è –∫–æ–ª–æ–Ω–∫–∞ - URL
            offer_url = str(url_cell.value)

            if offer_url:
                title_cell.value = f'=HYPERLINK("{offer_url}", "{title_cell.value}")'
                title_cell.font = hlink_style

                url_cell.hyperlink = offer_url
                url_cell.font = hlink_style

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
    for col_idx, width in column_widths.items():
        output_ws.column_dimensions[get_column_letter(col_idx)].width = min(width, 100)

    print("\r‚úÖ  –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", end="", flush=True)
    time.sleep(1)

    try:
        with yaspin(text="–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ") as spinner:
            merged_wb.save(save_path)
            spinner.text = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ'
            spinner.ok('‚úîÔ∏è')
            time.sleep(1)

        print(f"üíæ  {LIGHT_GREEN}–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ `{clickable_file_link(save_path)}` {WHITE}")
        time.sleep(1)

    except PermissionError as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å EXCEL —Ñ–∞–π–ª: {e}")


def register_styles(wb: Workbook):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∏–ª–∏ –≤ —Ä–∞–±–æ—á–µ–π –∫–Ω–∏–≥–µ Excel, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∏–ª—è –≤ —Å–ø–∏—Å–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π —Ä–∞–±–æ—á–µ–π –∫–Ω–∏–≥–∏ `wb`.
    –ï—Å–ª–∏ —Å—Ç–∏–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É.

    :param wb: –û–±—ä–µ–∫—Ç —Ä–∞–±–æ—á–µ–π –∫–Ω–∏–≥–∏ Excel (`openpyxl.Workbook`), –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏.
    """

    def add_style(style):
        if style.name not in wb.named_styles:
            wb.add_named_style(style)

    add_style(success_status)
    add_style(error_status)
    add_style(hidden_status)
    add_style(not_specified_status)


def save_offers(content: list[Offer], region_id, region_name, city_id, city_name, category_id, category_name, out_dir, save_json, save_xls):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (`Offer`) –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (JSON –∏/–∏–ª–∏ Excel) –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.

    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–∞ –∏ –≥–æ—Ä–æ–¥–∞,
    –∞ –∑–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏/–∏–ª–∏ XLSX, –µ—Å–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–ª–∞–≥–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.

    :param content: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
    :param region_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞.
    :param region_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞.
    :param city_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–∞.
    :param city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.
    :param category_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    :param category_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    :param out_dir: –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.
    :param save_json: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
    :param save_xls: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XLSX.
    """
    filename = validate_filename(f'{region_id}_{city_id}_{category_id}_{category_name}__offers({len(content)})')
    file_path = os.path.join(out_dir, f"{region_name.replace(' ', '-')}_{region_id}", f"{city_name}_{city_id}")
    os.makedirs(file_path, exist_ok=True)

    if save_json:
        save_json([item.model_dump() for item in content], os.path.join(out_dir, f'{filename}.json'))

    if save_xls:
        save_offers_excel(content, os.path.join(file_path, f'{filename}.xlsx'), show_info=False)


async def process_cell(parser, n, item, total, counter, ws, wb, wb_path, save_every_n=20):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —è—á–µ–π–∫—É —Ç–∞–±–ª–∏—Ü—ã.
    –ü–æ–ª—É—á–∞–µ—Ç —è—á–µ–π–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏, –ø–æ—Ç–æ–º –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å OLX, –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—Ä–∞—Ç–Ω–æ –≤ —è—á–µ–π–∫—É

    :param parser: olxParser
    :param n: –¢–µ–∫—É—â–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è
    :param item: –î–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    :param total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ö—è–≤–ª–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ
    :param counter: –°—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞—å–æ—Ç–∫–∏ —è—á–µ–µ–∫
    :param ws: –†–∞–±–æ—á–∏–π –ª–∏—Å—Ç
    :param wb: –†–∞–±–æ—á–∞—è –∫–Ω–∏–≥–∞
    :param wb_path: –ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞
    :param save_every_n: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∂–¥—ã–µ x –∏—Ç–µ—Ä–∞—Ü–∏–π
    :return:
    """
    async with lock:
        counter['value'] += 1
        progress = f"[{counter['value']} / {total}]"

    offer_id = item[0]
    url = item[10]
    row_idx = n + 2
    number_cell = ws.cell(row=row_idx, column=3)
    digits = ''.join(re.findall(r'\d+', str(item[2])))

    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω, —É–¥–∞–ª–µ–Ω, —Å–∫—Ä—ã—Ç –∏–ª–∏ —É–∂–µ –ø–æ–ª—É—á–µ–Ω, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —è—á–µ–π–∫—É
    if number_cell.value == 'False':
        number_cell.value = '–Ω–µ —É–∫–∞–∑–∞–Ω'
        number_cell.style = 'not_specified_status'
        print(f"{progress}  ‚Ñπ  {DARK_GRAY}  –ù–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω {''.ljust(20)}{WHITE} ¬∑ {url}")
        return

    if number_cell.value == '–Ω–µ —É–∫–∞–∑–∞–Ω':
        return

    if number_cell.value == '—É–¥–∞–ª–µ–Ω':
        return

    if number_cell.value == '—Å–∫—Ä—ã—Ç':
        return

    if digits.isdigit():
        return

    response = await parser.get_phone_number(offer_id, response_only=True)
    if isinstance(response, Exception):
        number_cell.value = '–æ—à–∏–±–∫–∞'
        number_cell.style = 'error_status'
        print(f"{progress}  ‚ùå{RED}  –ù–æ–º–µ—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω: {WHITE}–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞: {response} ¬∑ {url}")
        return
    if response == {}:
        number_cell.value = 'Captcha'
        number_cell.style = 'error_status'
        print(f"{progress}  ‚ùå{RED}  –ù–æ–º–µ—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω: {WHITE}Captcha {''.ljust(9)} ¬∑  {url}")
        return

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, —Ç–æ —Å—Ç–∞–≤–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å –≤ —è—á–µ–π–∫—É
    if 'error' in response:
        error = response.get('error', {}).get('detail')
        if error == 'Disallowed for this user':
            number_cell.value = '—Å–∫—Ä—ã—Ç'
            number_cell.style = 'hidden_status'
        elif error == 'Ad is not active':
            number_cell.value = '—É–¥–∞–ª–µ–Ω'
            number_cell.style = 'not_specified_status'
        elif '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å' in error:
            number_cell.value = 'Captcha'
            number_cell.style = 'error_status'
            print(f"{progress}  ‚ùå{RED}  –ù–æ–º–µ—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω: {WHITE} Captcha {''.ljust(9)} ¬∑ {url}")
        else:
            error = error.split('.')[0]
            print(f"{progress}  ‚ùå{RED}  –ù–æ–º–µ—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω: {WHITE} {error} ¬∑ {url}")

        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –±—ã–ª —Å–∫—Ä—ã—Ç, —Ç–æ –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å, –µ—Å–ª–∏ –≤—Å–µ —É—Å–ø–µ—à–Ω–æ —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —è—á–µ–π–∫—É
        if number_cell.value == '—Å–∫—Ä—ã—Ç':
            phone = await parser.get_phone_number(offer_id)
            if phone:
                number_cell.value = phone
                number_cell.style = 'success_status'
                print(f"{progress}  ‚úî{GREEN}  –ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω: {LIGHT_YELLOW}{phone.ljust(20)}{WHITE} ¬∑ {url}")
            else:
                print(f"{progress}  ‚ùå{RED}  –ù–æ–º–µ—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω: {WHITE} –û—à–∏–±–∫–∞ 1 ¬∑ {url}")

    else:
        # –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç, —Ç–æ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –æ—Ç–≤–µ—Ç–∞, —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —è—á–µ–π–∫—É
        phones = response.get('data', {}).get('phones')

        if phones:
            phone = ' ¬∑ '.join([str(p) for p in phones])
            number_cell.value = phone
            number_cell.style = 'success_status'
            print(f"{progress}  ‚úî{LIGHT_GREEN}  –ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω: {LIGHT_YELLOW}{phone.ljust(20)}{WHITE} ¬∑ {url}")
        else:
            print(f"{progress}  ‚ùå{DARK_GRAY}  –ù–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω {''.ljust(20)}{WHITE} ¬∑ {url}")

    # –ï—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ –∫–∞–ø—á–∞, —Ç–æ –ø—ã—Ç–∞–µ–º—Å—è –µ—â–µ —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä
    if number_cell.value == 'True' or number_cell.value == 'Captcha':
        phone = await parser.get_phone_number(offer_id)
        if phone:
            number_cell.value = phone
            number_cell.style = 'success_status'
            print(f"{progress}  ‚úî{LIGHT_CYAN}  –ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω: {LIGHT_YELLOW}{phone.ljust(20)}{WHITE} ¬∑ {url}")
        else:
            print(f"{progress}  ‚ùå{RED}  –ù–æ–º–µ—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω: {WHITE} –û—à–∏–±–∫–∞ 2 ¬∑ {url}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ N –∏—Ç–µ—Ä–∞—Ü–∏–π
    if (n + 1) % save_every_n == 0:
        async with lock:
            wb.save(wb_path)
        get_token(exp_time_only=True)
